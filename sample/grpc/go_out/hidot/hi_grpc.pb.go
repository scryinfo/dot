// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: hi.proto

package hidot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HiDot_Hi_FullMethodName           = "/hidot.HiDot/Hi"
	HiDot_Write_FullMethodName        = "/hidot.HiDot/Write"
	HiDot_ServerStream_FullMethodName = "/hidot.HiDot/ServerStream"
	HiDot_ClientStream_FullMethodName = "/hidot.HiDot/ClientStream"
	HiDot_BothSides_FullMethodName    = "/hidot.HiDot/BothSides"
)

// HiDotClient is the client API for HiDot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HiDotClient interface {
	Hi(ctx context.Context, in *HiReq, opts ...grpc.CallOption) (*HiRes, error)
	Write(ctx context.Context, in *WriteReq, opts ...grpc.CallOption) (*WriteRes, error)
	ServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[HelloRequest, HelloResponse], error)
	BothSides(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloRequest, HelloResponse], error)
}

type hiDotClient struct {
	cc grpc.ClientConnInterface
}

func NewHiDotClient(cc grpc.ClientConnInterface) HiDotClient {
	return &hiDotClient{cc}
}

func (c *hiDotClient) Hi(ctx context.Context, in *HiReq, opts ...grpc.CallOption) (*HiRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HiRes)
	err := c.cc.Invoke(ctx, HiDot_Hi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiDotClient) Write(ctx context.Context, in *WriteReq, opts ...grpc.CallOption) (*WriteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteRes)
	err := c.cc.Invoke(ctx, HiDot_Write_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiDotClient) ServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HiDot_ServiceDesc.Streams[0], HiDot_ServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequest, HelloResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HiDot_ServerStreamClient = grpc.ServerStreamingClient[HelloResponse]

func (c *hiDotClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[HelloRequest, HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HiDot_ServiceDesc.Streams[1], HiDot_ClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequest, HelloResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HiDot_ClientStreamClient = grpc.ClientStreamingClient[HelloRequest, HelloResponse]

func (c *hiDotClient) BothSides(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloRequest, HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HiDot_ServiceDesc.Streams[2], HiDot_BothSides_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequest, HelloResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HiDot_BothSidesClient = grpc.BidiStreamingClient[HelloRequest, HelloResponse]

// HiDotServer is the server API for HiDot service.
// All implementations must embed UnimplementedHiDotServer
// for forward compatibility.
type HiDotServer interface {
	Hi(context.Context, *HiReq) (*HiRes, error)
	Write(context.Context, *WriteReq) (*WriteRes, error)
	ServerStream(*HelloRequest, grpc.ServerStreamingServer[HelloResponse]) error
	ClientStream(grpc.ClientStreamingServer[HelloRequest, HelloResponse]) error
	BothSides(grpc.BidiStreamingServer[HelloRequest, HelloResponse]) error
	mustEmbedUnimplementedHiDotServer()
}

// UnimplementedHiDotServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHiDotServer struct{}

func (UnimplementedHiDotServer) Hi(context.Context, *HiReq) (*HiRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hi not implemented")
}
func (UnimplementedHiDotServer) Write(context.Context, *WriteReq) (*WriteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedHiDotServer) ServerStream(*HelloRequest, grpc.ServerStreamingServer[HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedHiDotServer) ClientStream(grpc.ClientStreamingServer[HelloRequest, HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedHiDotServer) BothSides(grpc.BidiStreamingServer[HelloRequest, HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BothSides not implemented")
}
func (UnimplementedHiDotServer) mustEmbedUnimplementedHiDotServer() {}
func (UnimplementedHiDotServer) testEmbeddedByValue()               {}

// UnsafeHiDotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HiDotServer will
// result in compilation errors.
type UnsafeHiDotServer interface {
	mustEmbedUnimplementedHiDotServer()
}

func RegisterHiDotServer(s grpc.ServiceRegistrar, srv HiDotServer) {
	// If the following call pancis, it indicates UnimplementedHiDotServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HiDot_ServiceDesc, srv)
}

func _HiDot_Hi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiDotServer).Hi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HiDot_Hi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiDotServer).Hi(ctx, req.(*HiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HiDot_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiDotServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HiDot_Write_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiDotServer).Write(ctx, req.(*WriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HiDot_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HiDotServer).ServerStream(m, &grpc.GenericServerStream[HelloRequest, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HiDot_ServerStreamServer = grpc.ServerStreamingServer[HelloResponse]

func _HiDot_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HiDotServer).ClientStream(&grpc.GenericServerStream[HelloRequest, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HiDot_ClientStreamServer = grpc.ClientStreamingServer[HelloRequest, HelloResponse]

func _HiDot_BothSides_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HiDotServer).BothSides(&grpc.GenericServerStream[HelloRequest, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HiDot_BothSidesServer = grpc.BidiStreamingServer[HelloRequest, HelloResponse]

// HiDot_ServiceDesc is the grpc.ServiceDesc for HiDot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HiDot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hidot.HiDot",
	HandlerType: (*HiDotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hi",
			Handler:    _HiDot_Hi_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _HiDot_Write_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _HiDot_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _HiDot_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BothSides",
			Handler:       _HiDot_BothSides_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hi.proto",
}
