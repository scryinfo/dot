// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: config.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DotConfigFace_FindDot_FullMethodName        = "/rpc.DotConfigFace/FindDot"
	DotConfigFace_ImportByConfig_FullMethodName = "/rpc.DotConfigFace/ImportByConfig"
	DotConfigFace_ImportByDot_FullMethodName    = "/rpc.DotConfigFace/ImportByDot"
	DotConfigFace_InitImport_FullMethodName     = "/rpc.DotConfigFace/InitImport"
	DotConfigFace_ExportConfig_FullMethodName   = "/rpc.DotConfigFace/ExportConfig"
	DotConfigFace_ExportDot_FullMethodName      = "/rpc.DotConfigFace/ExportDot"
)

// DotConfigFaceClient is the client API for DotConfigFace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ----------------------------------------------------------------------
type DotConfigFaceClient interface {
	FindDot(ctx context.Context, in *FindReq, opts ...grpc.CallOption) (*FindRes, error)
	// 文件导入
	ImportByConfig(ctx context.Context, in *ImportReq, opts ...grpc.CallOption) (*ImportRes, error)
	ImportByDot(ctx context.Context, in *ImportReq, opts ...grpc.CallOption) (*ImportRes, error)
	InitImport(ctx context.Context, in *ImportReq, opts ...grpc.CallOption) (*ImportRes, error)
	// 导出文件
	ExportConfig(ctx context.Context, in *ExportReq, opts ...grpc.CallOption) (*ExportRes, error)
	ExportDot(ctx context.Context, in *ExportReq, opts ...grpc.CallOption) (*ExportRes, error)
}

type dotConfigFaceClient struct {
	cc grpc.ClientConnInterface
}

func NewDotConfigFaceClient(cc grpc.ClientConnInterface) DotConfigFaceClient {
	return &dotConfigFaceClient{cc}
}

func (c *dotConfigFaceClient) FindDot(ctx context.Context, in *FindReq, opts ...grpc.CallOption) (*FindRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindRes)
	err := c.cc.Invoke(ctx, DotConfigFace_FindDot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dotConfigFaceClient) ImportByConfig(ctx context.Context, in *ImportReq, opts ...grpc.CallOption) (*ImportRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportRes)
	err := c.cc.Invoke(ctx, DotConfigFace_ImportByConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dotConfigFaceClient) ImportByDot(ctx context.Context, in *ImportReq, opts ...grpc.CallOption) (*ImportRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportRes)
	err := c.cc.Invoke(ctx, DotConfigFace_ImportByDot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dotConfigFaceClient) InitImport(ctx context.Context, in *ImportReq, opts ...grpc.CallOption) (*ImportRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportRes)
	err := c.cc.Invoke(ctx, DotConfigFace_InitImport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dotConfigFaceClient) ExportConfig(ctx context.Context, in *ExportReq, opts ...grpc.CallOption) (*ExportRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportRes)
	err := c.cc.Invoke(ctx, DotConfigFace_ExportConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dotConfigFaceClient) ExportDot(ctx context.Context, in *ExportReq, opts ...grpc.CallOption) (*ExportRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportRes)
	err := c.cc.Invoke(ctx, DotConfigFace_ExportDot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DotConfigFaceServer is the server API for DotConfigFace service.
// All implementations must embed UnimplementedDotConfigFaceServer
// for forward compatibility.
//
// ----------------------------------------------------------------------
type DotConfigFaceServer interface {
	FindDot(context.Context, *FindReq) (*FindRes, error)
	// 文件导入
	ImportByConfig(context.Context, *ImportReq) (*ImportRes, error)
	ImportByDot(context.Context, *ImportReq) (*ImportRes, error)
	InitImport(context.Context, *ImportReq) (*ImportRes, error)
	// 导出文件
	ExportConfig(context.Context, *ExportReq) (*ExportRes, error)
	ExportDot(context.Context, *ExportReq) (*ExportRes, error)
	mustEmbedUnimplementedDotConfigFaceServer()
}

// UnimplementedDotConfigFaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDotConfigFaceServer struct{}

func (UnimplementedDotConfigFaceServer) FindDot(context.Context, *FindReq) (*FindRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDot not implemented")
}
func (UnimplementedDotConfigFaceServer) ImportByConfig(context.Context, *ImportReq) (*ImportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportByConfig not implemented")
}
func (UnimplementedDotConfigFaceServer) ImportByDot(context.Context, *ImportReq) (*ImportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportByDot not implemented")
}
func (UnimplementedDotConfigFaceServer) InitImport(context.Context, *ImportReq) (*ImportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitImport not implemented")
}
func (UnimplementedDotConfigFaceServer) ExportConfig(context.Context, *ExportReq) (*ExportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportConfig not implemented")
}
func (UnimplementedDotConfigFaceServer) ExportDot(context.Context, *ExportReq) (*ExportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportDot not implemented")
}
func (UnimplementedDotConfigFaceServer) mustEmbedUnimplementedDotConfigFaceServer() {}
func (UnimplementedDotConfigFaceServer) testEmbeddedByValue()                       {}

// UnsafeDotConfigFaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DotConfigFaceServer will
// result in compilation errors.
type UnsafeDotConfigFaceServer interface {
	mustEmbedUnimplementedDotConfigFaceServer()
}

func RegisterDotConfigFaceServer(s grpc.ServiceRegistrar, srv DotConfigFaceServer) {
	// If the following call pancis, it indicates UnimplementedDotConfigFaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DotConfigFace_ServiceDesc, srv)
}

func _DotConfigFace_FindDot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DotConfigFaceServer).FindDot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DotConfigFace_FindDot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DotConfigFaceServer).FindDot(ctx, req.(*FindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DotConfigFace_ImportByConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DotConfigFaceServer).ImportByConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DotConfigFace_ImportByConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DotConfigFaceServer).ImportByConfig(ctx, req.(*ImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DotConfigFace_ImportByDot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DotConfigFaceServer).ImportByDot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DotConfigFace_ImportByDot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DotConfigFaceServer).ImportByDot(ctx, req.(*ImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DotConfigFace_InitImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DotConfigFaceServer).InitImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DotConfigFace_InitImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DotConfigFaceServer).InitImport(ctx, req.(*ImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DotConfigFace_ExportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DotConfigFaceServer).ExportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DotConfigFace_ExportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DotConfigFaceServer).ExportConfig(ctx, req.(*ExportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DotConfigFace_ExportDot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DotConfigFaceServer).ExportDot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DotConfigFace_ExportDot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DotConfigFaceServer).ExportDot(ctx, req.(*ExportReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DotConfigFace_ServiceDesc is the grpc.ServiceDesc for DotConfigFace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DotConfigFace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DotConfigFace",
	HandlerType: (*DotConfigFaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindDot",
			Handler:    _DotConfigFace_FindDot_Handler,
		},
		{
			MethodName: "ImportByConfig",
			Handler:    _DotConfigFace_ImportByConfig_Handler,
		},
		{
			MethodName: "ImportByDot",
			Handler:    _DotConfigFace_ImportByDot_Handler,
		},
		{
			MethodName: "InitImport",
			Handler:    _DotConfigFace_InitImport_Handler,
		},
		{
			MethodName: "ExportConfig",
			Handler:    _DotConfigFace_ExportConfig_Handler,
		},
		{
			MethodName: "ExportDot",
			Handler:    _DotConfigFace_ExportDot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
